name: PHP Composer

on:
  push:
    branches: [ nmai ]
  pull_request:
    branches: [ nmai ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test
- name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v1.9.0
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
    dotnet-version: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Whether prerelease versions should be matched with non-exact versions (for example 5.0.0-preview.6 being matched by 5, 5.0, 5.x or 5.0.x). Defaults to false if not provided.
    include-prerelease: # optional
- name: Cache
  uses: actions/cache@v2.1.7
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
- name: Xcodebuild Action
  # You may pin to the exact commit or the version.
  # uses: sersoft-gmbh/xcodebuild-action@46e877864168fb6e8017c6cd478e1fe447400131
  uses: sersoft-gmbh/xcodebuild-action@v1.8.0
  with:
    # The path to the xcworkspace to build. Mutually exclusive with `project` and `spm-package`. See also `xcodebuild`'s `-workspace`.
    workspace: # optional
    # The path to the xcodeproj to build. Mutually exclusive with `workspace` and `spm-package`. See also `xcodebuild`'s `-project`.
    project: # optional
    # The path to the SPM package (folder containing Package.swift) to build. Mutually exclusive with `workspace` and `project`.
    spm-package: # optional
    # The scheme to build. Required when using a workspace. See also `xcodebuild`'s `-scheme`.
    scheme: # optional
    # The target to build. See also `xcodebuild`'s `-target`.
    target: # optional
    # The destination specifier to build. See also `xcodebuild`'s `-destination`.
    destination: # optional
    # The configuration to build. See also `xcodebuild`'s `-configuration`.
    configuration: # optional
    # The SDK to use for building. See also `xcodebuild`'s `-sdk`.
    sdk: # optional
    # The architecture to use for building. See also `xcodebuild`'s `-arch`.
    arch: # optional
    # The path to an xcconfig file with build settings overrides. See also `xcodebuild`'s `-xcconfig`.
    xcconfig: # optional
    # The number of jobs to use for building. See also `xcodebuild`'s `-jobs`.
    jobs: # optional
    # If `true`, the targets will be built in parallel. See also `xcodebuild`'s `-parallelizeTargets`.
    parallelize-targets: # optional
    # If `true`, code coverage is enabled while testing. See also `xcodebuild`'s `-enableCodeCoverage`.
    enable-code-coverage: # optional
    # If `true`, tests are executed in parallel. See also `xcodebuild`'s `-parallel-testing-enabled`.
    parallel-testing-enabled: # optional
    # The maximum number of device destinations to run in parallel. See also `xcodebuild`'s `-maximum-concurrent-test-device-destinations`.
    maximum-concurrent-test-device-destinations: # optional
    # The maximum number of simulator destinations to run in parallel. See also `xcodebuild`'s `-maximum-concurrent-test-simulator-destinations`.
    maximum-concurrent-test-simulator-destinations: # optional
    # If `true`, xcodebuild won't print anything except warnings and errors. See also `xcodebuild`'s `-quiet`.
    quiet: # optional
    # If `true`, xcodebuild won't print the environment for shell build scripts. See also `xcodebuild`'s `-hideShellScriptEnvironment`.
    hide-shell-script-environment: # optional
    # Whether the address sanitizer should be enabled. See also `xcodebuild`'s `-enableAddressSanitizer`.
    enable-address-sanitizer: # optional
    # Whether the thread sanitizer should be enabled. See also `xcodebuild`'s `-enableThreadSanitizer`.
    enable-thread-sanitizer: # optional
    # Whether the undefined behavior sanitizer should be enabled. See also `xcodebuild`'s `-enableUndefinedBehaviorSanitizer`.
    enable-undefined-behavior-sanitizer: # optional
    # The path that should be used for the result bundle. See also `xcodebuild`'s `-resultBundlePath`.
    result-bundle-path: # optional
    # The version that should be used for the result bundle. See also `xcodebuild`'s `-resultBundleVersion`.
    result-bundle-version: # optional
    # The path that should be used for the cloning of remote packages. See also `xcodebuild`'s `-clonedSourcePackagesDirPath`.
    cloned-source-packages-path: # optional
    # The path that should be used for derived data. See also `xcodebuild`'s `-derivedDataPath`.
    derived-data-path: # optional
    # The path to a .xcroot to use for building and/or testing. See also `xcodebuild`'s `-xcroot`.
    xcroot: # optional
    # The path to a test run specification. See also `xcodebuild`'s `-xctestrun`.
    xctestrun: # optional
    # The name of the test plan associated with the scheme to use for testing. See also `xcodebuild`'s `-testPlan`.
    test-plan: # optional
    # A (line-separated) list of tests to run. See also `xcodebuild`'s `-only-testing`.
    only-testing: # optional
    # A (line-separated) list of tests to skip. See also `xcodebuild`'s `-skip-testing`.
    skip-testing: # optional
    # Whether unavailable actions should be skipped instead of failing the execution. See also `xcodebuild`'s `-skipUnavailableActions`.
    skip-unavailable-actions: # optional
    # Whether provisioning updates are allowed. See also `xcodebuild`'s `-allowProvisioningUpdates`.
    allow-provisioning-updates: # optional
    # Whether provisioning device registrations are allowed. See also `xcodebuild`'s `-allowProvisioningDeviceRegistration`.
    allow-provisioning-device-registration: # optional
    # Arbitrary, space separated build settings (e.g. PLATFORM_NAME=iphonesimulator).
    build-settings: # optional
    # The action to perform (e.g. build, test, ...). Can also contain multiple actions.
    action: # default is test
    # Whether the output of xcodebuild should be forwarded to xcpretty.
    use-xcpretty: # default is true
    # Whether xcpretty should use colored output (e.g. xcpretty --color).
    xcpretty-colored-output: # default is true
    # <TEST ONLY> Whether the commands should only be composed and not actually run. Only used in test.
    dry-run: # optional
